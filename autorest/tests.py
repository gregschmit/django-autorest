"""
Unit tests
"""

import os

from django.contrib.auth.models import User
from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APIRequestFactory, APITestCase

from .api_url_inflect import url_deviations
from .api_views import _action, _get_synonyms
from .middleware import TimeDelayMiddleware
from .version import get_version, stamp_directory, unstamp_directory


class URLDeviationsTestCase(TestCase):
    """
    Tests for the URL deviations generator.
    """

    def test_simple(self):
        d = url_deviations('Thing')
        self.assertIn('thing', d)
        self.assertIn('things', d)

    def test_two_simple_words(self):
        d = url_deviations('SomeThing')
        self.assertIn('something', d)
        self.assertIn('somethings', d)
        self.assertIn('some_thing', d)
        self.assertIn('some_things', d)

    def test_acronyms(self):
        d = url_deviations('PCSystem')
        self.assertIn('pcsystem', d)
        self.assertIn('pcsystems', d)
        self.assertIn('pc_system', d)
        self.assertIn('pc_systems', d)


class APIViewsTestCase(TestCase):
    """
    Tests for the API View module.
    """

    def test_builtin_synonyms(self):
        self.assertEqual(_get_synonyms('create'), ['create', 'add'])
        self.assertEqual(_get_synonyms('add'), ['create', 'add'])
        self.assertEqual(_get_synonyms('retrieve'), ['retrieve', 'detail'])
        self.assertEqual(_get_synonyms('detail'), ['retrieve', 'detail'])
        self.assertEqual(_get_synonyms('destroy'), ['destroy', 'delete'])
        self.assertEqual(_get_synonyms('delete'), ['destroy', 'delete'])

    def test_unknown_synonyms(self):
        self.assertEqual(_get_synonyms('blast'), ['blast'])
        self.assertEqual(_get_synonyms('edit'), ['edit'])

    def test_primary_actions(self):
        self.assertEqual(_action('create'), 'create')
        self.assertEqual(_action('retrieve'), 'retrieve')
        self.assertEqual(_action('destroy'), 'destroy')

    def test_synonymous_actions(self):
        self.assertEqual(_action('add'), 'create')
        self.assertEqual(_action('detail'), 'retrieve')
        self.assertEqual(_action('delete'), 'destroy')


class MiddlewareTestCase(TestCase):
    """
    Tests for the middleware.
    """

    def setUp(self):
        self.tdm = TimeDelayMiddleware(lambda x: x, 1)
        self.ftdm = TimeDelayMiddleware(lambda x: x, 0.5)
        self.req = type('TestRequest', (object,), {'path': 'nothing'})
        self.api_req = type('TestAPIRequest', (object,), {'path': '/api/thing'})

    def test_callable(self):
        self.assertTrue(callable(self.tdm))
        self.assertTrue(callable(self.ftdm))

    def test_delay_type(self):
        self.assertTrue(isinstance(self.tdm.delay, (int, float)))
        self.assertTrue(isinstance(self.ftdm.delay, (int, float)))

    def test_call(self):
        self.assertTrue(self.tdm(self.req))

    def test_api_call(self):
        self.assertTrue(self.tdm(self.api_req))


class VersionTestCase(TestCase):
    """
    Tests for versioning script.
    """

    def test_version_is_str(self):
        self.assertTrue(isinstance(get_version(), str))

    def test_stamp_unstamp(self):
        os.chdir(os.path.normpath(os.path.join(
            os.path.abspath(__file__),
            os.pardir,
        )))
        stamp_location = './VERSION_STAMP'
        try:
            os.remove(stamp_location)
        except OSError:
            pass
        stamp_directory('.')
        self.assertTrue(os.path.exists(stamp_location))
        self.assertTrue(os.path.isfile(stamp_location))
        unstamp_directory('.')
        self.assertFalse(os.path.exists(stamp_location))


class WsgiTestCase(TestCase):
    """
    Test WSGI doesn't fail.
    """

    def test_wsgi_simple(self):
        from . import wsgi
        self.assertTrue(wsgi.application)


class APITestCase(APITestCase):
    """
    Tests for the autogenerated API.
    """

    def setUp(self):
        self.factory = APIRequestFactory()
        self.user = User.objects.create_superuser(
            username='greg_schmit',
            email='greg_schmit@example.com',
            password='top_secret',
        )
        self.other_user = User.objects.create_superuser(
            username='john_doe',
            email='john_doe@example.com',
            password='bottom_secret',
        )

    def test_unauthorized_group_list(self):
        url = reverse('group-list')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

    def test_authorized_group_list(self):
        url = reverse('group-list')
        self.client.login(username='greg_schmit', password='top_secret')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.client.logout()
